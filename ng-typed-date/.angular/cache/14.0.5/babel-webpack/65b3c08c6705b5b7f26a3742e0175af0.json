{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Setup =\n/** @class */\nfunction () {\n  function Setup(mock, key) {\n    this.mock = mock;\n    this.key = key;\n    mock.Object[key] = {};\n    this.spy = spyOn(mock.Object, key);\n  }\n\n  Object.defineProperty(Setup.prototype, \"Spy\", {\n    get: function () {\n      return this.spy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** Setup the return value for the setup of the property */\n\n  Setup.prototype.is = function (value) {\n    this.mock.Object[this.key] = value;\n\n    if (typeof value === 'function') {\n      this.spy = spyOn(this.mock.Object, this.key).and.callThrough();\n    }\n\n    return this.mock;\n  };\n  /**\r\n   * Specify the return value of the property / method\r\n   * Can be used when mocking generic methods.\r\n   */\n\n\n  Setup.prototype.as = function () {\n    return new Setup(this.mock, this.key);\n  };\n\n  return Setup;\n}();\n\nexports.Setup = Setup;","map":{"version":3,"names":["Object","defineProperty","exports","value","Setup","mock","key","spy","spyOn","prototype","get","enumerable","configurable","is","and","callThrough","as"],"sources":["C:/repos/ng-typed-date/ng-typed-date/node_modules/ts-mocks/lib/mocks/setup.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Setup = /** @class */ (function () {\r\n    function Setup(mock, key) {\r\n        this.mock = mock;\r\n        this.key = key;\r\n        mock.Object[key] = {};\r\n        this.spy = spyOn(mock.Object, key);\r\n    }\r\n    Object.defineProperty(Setup.prototype, \"Spy\", {\r\n        get: function () {\r\n            return this.spy;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Setup the return value for the setup of the property */\r\n    Setup.prototype.is = function (value) {\r\n        this.mock.Object[this.key] = value;\r\n        if (typeof (value) === 'function') {\r\n            this.spy = spyOn(this.mock.Object, this.key).and.callThrough();\r\n        }\r\n        return this.mock;\r\n    };\r\n    /**\r\n     * Specify the return value of the property / method\r\n     * Can be used when mocking generic methods.\r\n     */\r\n    Setup.prototype.as = function () {\r\n        return new Setup(this.mock, this.key);\r\n    };\r\n    return Setup;\r\n}());\r\nexports.Setup = Setup;\r\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,KAAK;AAAG;AAAe,YAAY;EACnC,SAASA,KAAT,CAAeC,IAAf,EAAqBC,GAArB,EAA0B;IACtB,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKC,GAAL,GAAWA,GAAX;IACAD,IAAI,CAACL,MAAL,CAAYM,GAAZ,IAAmB,EAAnB;IACA,KAAKC,GAAL,GAAWC,KAAK,CAACH,IAAI,CAACL,MAAN,EAAcM,GAAd,CAAhB;EACH;;EACDN,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACK,SAA5B,EAAuC,KAAvC,EAA8C;IAC1CC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKH,GAAZ;IACH,CAHyC;IAI1CI,UAAU,EAAE,IAJ8B;IAK1CC,YAAY,EAAE;EAL4B,CAA9C;EAOA;;EACAR,KAAK,CAACK,SAAN,CAAgBI,EAAhB,GAAqB,UAAUV,KAAV,EAAiB;IAClC,KAAKE,IAAL,CAAUL,MAAV,CAAiB,KAAKM,GAAtB,IAA6BH,KAA7B;;IACA,IAAI,OAAQA,KAAR,KAAmB,UAAvB,EAAmC;MAC/B,KAAKI,GAAL,GAAWC,KAAK,CAAC,KAAKH,IAAL,CAAUL,MAAX,EAAmB,KAAKM,GAAxB,CAAL,CAAkCQ,GAAlC,CAAsCC,WAAtC,EAAX;IACH;;IACD,OAAO,KAAKV,IAAZ;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACID,KAAK,CAACK,SAAN,CAAgBO,EAAhB,GAAqB,YAAY;IAC7B,OAAO,IAAIZ,KAAJ,CAAU,KAAKC,IAAf,EAAqB,KAAKC,GAA1B,CAAP;EACH,CAFD;;EAGA,OAAOF,KAAP;AACH,CA9B0B,EAA3B;;AA+BAF,OAAO,CAACE,KAAR,GAAgBA,KAAhB"},"metadata":{},"sourceType":"script"}