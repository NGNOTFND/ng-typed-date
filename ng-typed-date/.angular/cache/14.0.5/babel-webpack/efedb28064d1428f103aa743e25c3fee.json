{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar setup_1 = require(\"./setup\");\n/** Class for mocking objects/interfaces in Typescript */\n\n\nvar Mock =\n/** @class */\nfunction () {\n  function Mock(object) {\n    if (object === void 0) {\n      object = {};\n    }\n\n    this._object = {};\n    this._spies = new Map();\n    this._object = object;\n    this.extend(object);\n  }\n  /** Create mock from a Type */\n\n\n  Mock.of = function (type) {\n    return new Mock(new type());\n  };\n\n  Mock.static = function (obj, key, stub) {\n    var spy = jasmine.isSpy(obj[key]) ? obj[key] : spyOn(obj, key);\n    spy.calls.reset();\n    spy.and.callFake(stub);\n  };\n\n  Object.defineProperty(Mock.prototype, \"Object\", {\n    /** Return the mocked object */\n    get: function () {\n      return this._object;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** Extend the current mock object with implementation */\n\n  Mock.prototype.extend = function (object) {\n    var _this = this;\n\n    Object.keys(object).forEach(function (key) {\n      if (typeof object[key] === 'function' && !jasmine.isSpy(object[key])) {\n        var spy_1 = spyOn(object, key).and.callThrough();\n\n        _this._spies.set(key, function () {\n          return spy_1;\n        });\n      }\n    });\n    Object.assign(this._object, object);\n    return this;\n  };\n  /**\r\n   * Setup a property or a method with using lambda style settings.\r\n   * @param propertyName can be used as a fallback for environments where\r\n   * dynamic inferring of `propertyName` is not possible.\r\n   * For example, can be helpful in Wallaby.js test runner.\r\n   */\n\n\n  Mock.prototype.setup = function (value, propertyName) {\n    if (!propertyName) {\n      propertyName = this.getPropertyName(value);\n    }\n\n    var setup = new setup_1.Setup(this, propertyName);\n\n    this._spies.set(propertyName, function () {\n      return setup.Spy;\n    });\n\n    return setup;\n  };\n\n  Mock.prototype.getPropertyName = function (value) {\n    return value.toString().match(/(return|=>)\\s[\\w\\d_]*\\.([\\w\\d$_]*)\\;?/)[2];\n  };\n  /**\r\n   * Get the spy of method or property that has be set with extend of setup/is.\r\n   * @param propertyName can be used as a fallback for environments where\r\n   * dynamic inferring of `propertyName` is not possible.\r\n   * For example, can be helpful in Wallaby.js test runner.\r\n   */\n\n\n  Mock.prototype.spyOf = function (value, propertyName) {\n    if (!propertyName) {\n      propertyName = this.getPropertyName(value);\n    }\n\n    if (this._spies.has(propertyName)) {\n      return this._spies.get(propertyName)();\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Get the jasmineCalls information of a specify method\r\n   * @summary due to @types/jasmine update the jasmine.Calls is not working anymore\r\n   * therefor the callsOf method now returns any instead of jasmineCalls.\r\n   * In runtime this method returns a jasmine.Calls or jasmine.Calls<Fn>\r\n   */\n\n\n  Mock.prototype.callsOf = function (value, propertyName) {\n    var spy = this.spyOf(value);\n    return spy ? spy.calls : undefined;\n  };\n  /**\r\n   * Reset the calls count of a specific method\r\n   */\n\n\n  Mock.prototype.resetCalls = function (value, propertyName) {\n    var calls = this.callsOf(value);\n\n    if (calls) {\n      calls.reset();\n    }\n  };\n  /**\r\n   * Can be used to define empty methods when using extend\r\n   * mock.extend({ someMethod: Mock.ANY_FUNC });\r\n  */\n\n\n  Mock.ANY_FUNC = function () {\n    return undefined;\n  };\n\n  return Mock;\n}();\n\nexports.Mock = Mock;","map":{"version":3,"names":["Object","defineProperty","exports","value","setup_1","require","Mock","object","_object","_spies","Map","extend","of","type","static","obj","key","stub","spy","jasmine","isSpy","spyOn","calls","reset","and","callFake","prototype","get","enumerable","configurable","_this","keys","forEach","spy_1","callThrough","set","assign","setup","propertyName","getPropertyName","Setup","Spy","toString","match","spyOf","has","undefined","callsOf","resetCalls","ANY_FUNC"],"sources":["C:/repos/ng-typed-date/ng-typed-date/node_modules/ts-mocks/lib/mocks/mock.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar setup_1 = require(\"./setup\");\r\n/** Class for mocking objects/interfaces in Typescript */\r\nvar Mock = /** @class */ (function () {\r\n    function Mock(object) {\r\n        if (object === void 0) { object = {}; }\r\n        this._object = {};\r\n        this._spies = new Map();\r\n        this._object = object;\r\n        this.extend(object);\r\n    }\r\n    /** Create mock from a Type */\r\n    Mock.of = function (type) {\r\n        return new Mock(new type());\r\n    };\r\n    Mock.static = function (obj, key, stub) {\r\n        var spy = (jasmine.isSpy(obj[key]) ? obj[key] : spyOn(obj, key));\r\n        spy.calls.reset();\r\n        spy.and.callFake(stub);\r\n    };\r\n    Object.defineProperty(Mock.prototype, \"Object\", {\r\n        /** Return the mocked object */\r\n        get: function () {\r\n            return this._object;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Extend the current mock object with implementation */\r\n    Mock.prototype.extend = function (object) {\r\n        var _this = this;\r\n        Object.keys(object).forEach(function (key) {\r\n            if (typeof object[key] === 'function' && !jasmine.isSpy(object[key])) {\r\n                var spy_1 = spyOn(object, key).and.callThrough();\r\n                _this._spies.set(key, function () { return spy_1; });\r\n            }\r\n        });\r\n        Object.assign(this._object, object);\r\n        return this;\r\n    };\r\n    /**\r\n     * Setup a property or a method with using lambda style settings.\r\n     * @param propertyName can be used as a fallback for environments where\r\n     * dynamic inferring of `propertyName` is not possible.\r\n     * For example, can be helpful in Wallaby.js test runner.\r\n     */\r\n    Mock.prototype.setup = function (value, propertyName) {\r\n        if (!propertyName) {\r\n            propertyName = this.getPropertyName(value);\r\n        }\r\n        var setup = new setup_1.Setup(this, propertyName);\r\n        this._spies.set(propertyName, function () { return setup.Spy; });\r\n        return setup;\r\n    };\r\n    Mock.prototype.getPropertyName = function (value) {\r\n        return value.toString().match(/(return|=>)\\s[\\w\\d_]*\\.([\\w\\d$_]*)\\;?/)[2];\r\n    };\r\n    /**\r\n     * Get the spy of method or property that has be set with extend of setup/is.\r\n     * @param propertyName can be used as a fallback for environments where\r\n     * dynamic inferring of `propertyName` is not possible.\r\n     * For example, can be helpful in Wallaby.js test runner.\r\n     */\r\n    Mock.prototype.spyOf = function (value, propertyName) {\r\n        if (!propertyName) {\r\n            propertyName = this.getPropertyName(value);\r\n        }\r\n        if (this._spies.has(propertyName)) {\r\n            return this._spies.get(propertyName)();\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Get the jasmineCalls information of a specify method\r\n     * @summary due to @types/jasmine update the jasmine.Calls is not working anymore\r\n     * therefor the callsOf method now returns any instead of jasmineCalls.\r\n     * In runtime this method returns a jasmine.Calls or jasmine.Calls<Fn>\r\n     */\r\n    Mock.prototype.callsOf = function (value, propertyName) {\r\n        var spy = this.spyOf(value);\r\n        return spy ? spy.calls : undefined;\r\n    };\r\n    /**\r\n     * Reset the calls count of a specific method\r\n     */\r\n    Mock.prototype.resetCalls = function (value, propertyName) {\r\n        var calls = this.callsOf(value);\r\n        if (calls) {\r\n            calls.reset();\r\n        }\r\n    };\r\n    /**\r\n     * Can be used to define empty methods when using extend\r\n     * mock.extend({ someMethod: Mock.ANY_FUNC });\r\n    */\r\n    Mock.ANY_FUNC = function () { return undefined; };\r\n    return Mock;\r\n}());\r\nexports.Mock = Mock;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}